version: '3.5'

services:
  api-go01: &api # image:
    build: .
    hostname: api-go01
    environment:
      - DB_HOSTNAME=db
      - DB_USER=admin
      - DB_NAME=rinha
      - DB_PASSWORD=123

    ports:
      - '8081:3000'
    depends_on:
      db:
        condition: service_healthy
    links:
      - db
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '70MB'

  api-go02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api
    hostname: api02
    ports:
      - '8082:3000'

  nginx:
    image: nginx:latest
    logging:
      driver: none
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-go01
      - api-go02
    ports:
      # ObrigatÃ³rio expor/usar a porta 9999 no load balancer!
      - '9999:9999'
    deploy:
      resources:
        limits:
          cpus: '0.45'
          memory: '40MB'

  db:
    image: postgres:alpine
    hostname: db
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_USER=admin
      - POSTGRES_DB=rinha
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.config_file
    ports:
      - '5432:5432'
    command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.config_file
    deploy:
      resources:
        limits:
          cpus: '0.55'
          memory: '420MB'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}']
      timeout: 10s
      interval: 10s
      retries: 2
